// Generated by CoffeeScript 1.6.3
var DEFAULT_CHARSET, DEFAULT_HOST, DEFAULT_PORT, Service, https, iconv, qs;

https = require('https');

iconv = require('iconv-lite');

qs = require('querystring');

DEFAULT_HOST = 'money.yandex.ru';

DEFAULT_PORT = 443;

DEFAULT_CHARSET = 'utf-8';

Service = (function() {
  function Service(token, host, port, charset) {
    this.token = token;
    this.host = host != null ? host : DEFAULT_HOST;
    this.port = port != null ? port : DEFAULT_PORT;
    this.charset = charset != null ? charset : DEFAULT_CHARSET;
  }

  Service.prototype.path = function(options) {
    return '/api/' + options.name;
  };

  Service.prototype.headers = function(body) {
    return {
      'authorization': 'Bearer ' + this.token,
      'content-type': 'application/x-www-form-urlencoded; charset=' + this.charset,
      'content-length': body.length
    };
  };

  Service.prototype.body = function(options) {
    return iconv.encode(qs.stringify(options.data), this.charset);
  };

  Service.prototype.parse = function(data, contentType) {
    switch (contentType) {
      case 'application/json':
        return JSON.parse(iconv.decode(data));
    }
  };

  Service.prototype.invoke = function(options) {
    var body, request,
      _this = this;
    body = this.body(options);
    request = https.request({
      host: this.host,
      port: this.port,
      method: options.method,
      path: this.path(options),
      headers: this.headers(body)
    });
    request.on('response', function(response) {
      var chunks, contentType, parameters, _ref;
      _ref = response.headers['content-type'].split(/;\s*/), contentType = _ref[0], parameters = _ref[1];
      chunks = [];
      response.on('readable', function() {
        chunks.push(response.read());
        return void 0;
      });
      response.on('end', function() {
        var data;
        data = _this.parse(Buffer.concat(chunks), contentType);
        if (response.statusCode === 200) {
          if (typeof options.callback === "function") {
            options.callback(null, data);
          }
        } else {
          if (typeof options.callback === "function") {
            options.callback(new Error(), data);
          }
        }
        return void 0;
      });
      return void 0;
    });
    request.on('error', function(error) {
      if (typeof options.callback === "function") {
        options.callback(new Error('Network error'));
      }
      return void 0;
    });
    request.end(body);
    return this;
  };

  return Service;

})();

module.exports = Service;
