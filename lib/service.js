// Generated by CoffeeScript 1.6.3
var DEFAULT_CHARSET, DEFAULT_HOST, DEFAULT_PORT, Service, https, iconv, qs;

https = require('https');

qs = require('querystring');

iconv = require('iconv-lite');

DEFAULT_HOST = 'money.yandex.ru';

DEFAULT_PORT = 443;

DEFAULT_CHARSET = 'utf-8';

Service = (function() {
  function Service(token, host, port, charset) {
    this.token = token;
    this.host = host != null ? host : DEFAULT_HOST;
    this.port = port != null ? port : DEFAULT_PORT;
    this.charset = charset != null ? charset : DEFAULT_CHARSET;
  }

  Service.prototype._path = function(options) {
    return '/api/' + options.method;
  };

  Service.prototype._headers = function(body) {
    return {
      'Authorization': 'Bearer ' + this.token,
      'Content-type': 'application/x-www-form-urlencoded; charset=' + this.charset,
      'Content-length': body.length
    };
  };

  Service.prototype._serialize = function(data) {
    return iconv.encode(qs.stringify(data), this.charset);
  };

  Service.prototype._parse = function(data) {
    return JSON.parse(iconv.decode(data, 'utf-8'));
  };

  Service.prototype.invoke = function(options) {
    var body, headers, request,
      _this = this;
    body = this._serialize(options.data);
    headers = this._headers(body);
    request = https.request({
      host: this.host,
      port: this.port,
      method: 'POST',
      path: this._path(options),
      headers: headers
    });
    request.on('response', function(response) {
      var chunks;
      chunks = [];
      response.on('readable', function() {
        chunks.push(response.read());
        return void 0;
      });
      response.on('end', function() {
        var data;
        data = Buffer.concat(chunks);
        if (typeof options.callback === "function") {
          options.callback(null, _this._parse(data));
        }
        return void 0;
      });
      return void 0;
    });
    request.on('error', function(error) {
      if (typeof options.callback === "function") {
        options.callback(error);
      }
      return void 0;
    });
    request.end(body);
    return this;
  };

  return Service;

})();

module.exports = Service;
