// Generated by CoffeeScript 1.6.3
var Client, HTTPS, Iconv, QS;

HTTPS = require('https');

QS = require('qs');

Iconv = require('iconv-lite');

Client = (function() {
  Client.SERVER_NAME = 'money.yandex.ru';

  Client.SERVER_PORT = 443;

  Client.REQUEST_CHARSET = 'utf-8';

  function Client(options) {
    var _ref, _ref1, _ref2, _ref3;
    if (options == null) {
      options = Object.create(null);
    }
    this._host = (_ref = options.host) != null ? _ref : this.constructor.SERVER_NAME;
    this._port = (_ref1 = options.port) != null ? _ref1 : this.constructor.SERVER_PORT;
    this._charset = (_ref2 = options.charset) != null ? _ref2 : this.constructor.REQUEST_CHARSET;
    this._token = (_ref3 = options.token) != null ? _ref3 : null;
  }

  Client.prototype._requestOptions = function(endpoint, body) {
    var headers, options, path;
    path = '/api/' + endpoint;
    headers = {
      'Authorization': 'Bearer ' + this._token,
      'Content-Type': 'application/x-www-form-urlencoded; charset=' + this._charset,
      'Content-Length': body.length
    };
    options = {
      host: this._host,
      port: this._port,
      method: 'POST',
      path: path,
      headers: headers
    };
    return options;
  };

  Client.prototype._responseHandler = function(callback) {
    return function(response) {
      var charset, chunks, contentType, firstAttr, mimeType, _ref;
      contentType = response.headers['content-type'];
      _ref = contentType.split(/\s*;\s*/, 2), mimeType = _ref[0], firstAttr = _ref[1];
      charset = firstAttr.split('=')[1];
      chunks = [];
      response.on('readable', function() {
        chunks.push(response.read());
        return void 0;
      });
      response.on('end', function() {
        var body, data;
        body = Buffer.concat(chunks);
        if (response.statusCode === 200) {
          if (mimeType === 'application/json') {
            data = JSON.parse(Iconv.decode(body, charset));
            if (data.error == null) {
              callback(null, data);
            } else {
              callback(new Error(data.error));
            }
          } else {
            callback(new Error('Unexpected MIME-type'));
          }
        } else {
          callback(new Error('Something went wrong. See headers'));
        }
        return void 0;
      });
      return void 0;
    };
  };

  Client.prototype.sendRequest = function(endpoint, data, callback) {
    var body, request;
    body = Iconv.encode(QS.stringify(data), this._charset);
    request = HTTPS.request(this._requestOptions(endpoint, body));
    request.on('response', this._responseHandler(callback));
    request.on('error', function(error) {
      if (typeof callback === "function") {
        callback(error);
      }
      return void 0;
    });
    request.end(body);
    return this;
  };

  Client.prototype.setToken = function(token) {
    this._token = token;
    return this;
  };

  Client.prototype.removeToken = function() {
    this._token = null;
    return this;
  };

  Client.prototype.accountInfo = function(callback) {
    return this.sendRequest('account-info', null, callback);
  };

  Client.prototype.operationDetails = function(id, callback) {
    return this.sendRequest('operation-details', {
      operation_id: id
    }, callback);
  };

  Client.prototype.operationHistory = function(selector, callback) {
    return this.sendRequest('operation-history', selector, callback);
  };

  Client.prototype.requestPayment = function(data, callback) {
    return this.sendRequest('request-payment', data, callback);
  };

  Client.prototype.processPayment = function(data, callback) {
    return this.sendRequest('process-payment', data, callback);
  };

  return Client;

})();

module.exports = Client;
