// Generated by CoffeeScript 1.6.3
var Client, HTTPS, Iconv, QS;

HTTPS = require('https');

QS = require('qs');

Iconv = require('iconv-lite');

Client = (function() {
  Client.SERVER_NAME = 'money.yandex.ru';

  Client.SERVER_PORT = 443;

  Client.REQUEST_CHARSET = 'utf-8';

  function Client(options) {
    this._host = options != null ? options.host : void 0;
    if (this._host == null) {
      this._host = this.constructor.SERVER_NAME;
    }
    this._port = options != null ? options.port : void 0;
    if (this._port == null) {
      this._port = this.constructor.SERVER_PORT;
    }
    this._charset = options != null ? options.charset : void 0;
    if (this._charset == null) {
      this._charset = this.constructor.REQUEST_CHARSET;
    }
    this._token = options != null ? options.token : void 0;
  }

  Client.prototype._requestOptions = function(endpoint, body) {
    var headers, options, path;
    path = '/api/' + endpoint;
    headers = {
      'Authorization': 'Bearer ' + this._token,
      'Content-Type': 'application/x-www-form-urlencoded; charset=' + this._charset,
      'Content-Length': body.length
    };
    options = {
      host: this._host,
      port: this._port,
      method: 'POST',
      path: path,
      headers: headers
    };
    return options;
  };

  Client.prototype._responseHandler = function(callback) {
    return function(response) {
      var charset, chunks, contentType, firstAttr, mediaType, _ref;
      contentType = response.headers['content-type'];
      _ref = contentType.split(/\s*;\s*/, 2), mediaType = _ref[0], firstAttr = _ref[1];
      charset = firstAttr.split('=')[1];
      chunks = [];
      response.on('readable', function() {
        chunks.push(response.read());
        return void 0;
      });
      response.on('end', function() {
        var fields;
        if (response.statusCode === 200) {
          fields = JSON.parse(Iconv.decode(Buffer.concat(chunks), charset));
          if (fields.error == null) {
            callback(null, fields);
          } else {
            callback(new Error(fields.error));
          }
        } else {
          callback(new Error('Something went wrong'));
        }
        return void 0;
      });
      return void 0;
    };
  };

  Client.prototype.sendRequest = function(endpoint, data, callback) {
    var body, request;
    body = Iconv.encode(QS.stringify(data), this._charset);
    request = HTTPS.request(this._requestOptions(endpoint, body));
    request.on('response', this._responseHandler(callback));
    request.on('error', function(error) {
      if (typeof callback === "function") {
        callback(error);
      }
      return void 0;
    });
    request.end(body);
    return this;
  };

  Client.prototype.setToken = function(token) {
    this._token = token;
    return this;
  };

  Client.prototype.removeToken = function() {
    this._token = null;
    return this;
  };

  Client.prototype.accountInfo = function(callback) {
    return this.sendRequest('account-info', null, callback);
  };

  Client.prototype.operationDetails = function(id, callback) {
    return this.sendRequest('operation-details', {
      operation_id: id
    }, callback);
  };

  Client.prototype.operationHistory = function(selector, callback) {
    return this.sendRequest('operation-history', selector, callback);
  };

  Client.prototype.requestPayment = function(data, callback) {
    return this.sendRequest('request-payment', data, callback);
  };

  Client.prototype.processPayment = function(data, callback) {
    return this.sendRequest('process-payment', data, callback);
  };

  return Client;

})();

module.exports = Client;
