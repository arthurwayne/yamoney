// Generated by CoffeeScript 1.6.3
var Client, HTTPS, Iconv, QS;

HTTPS = require('https');

QS = require('querystring');

Iconv = require('iconv-lite');

Client = (function() {
  Client.DEFAULT_HOST = 'money.yandex.ru';

  Client.DEFAULT_PORT = 443;

  Client.DEFAULT_CHARSET = 'utf-8';

  function Client(token, host, port, charset) {
    this.token = token;
    this.host = host != null ? host : DEFAULT_HOST;
    this.port = port != null ? port : DEFAULT_PORT;
    this.charset = charset != null ? charset : DEFAULT_CHARSET;
  }

  Client.prototype._path = function(options) {
    return '/api/' + options.method;
  };

  Client.prototype._body = function(data) {
    return iconv.encode(qs.stringify(data), this.charset);
  };

  Client.prototype._headers = function(body) {
    return {
      'Authorization': 'Bearer ' + this.token,
      'Content-Type': 'application/x-www-form-urlencoded; charset=' + this.charset,
      'Content-Length': body.length
    };
  };

  Client.prototype._data = function(body) {
    return JSON.parse(iconv.decode(body, 'utf-8'));
  };

  Client.prototype.sendCommand = function(method, input, callback) {
    var body, headers, path, request;
    body = this._body(options.data);
    headers = this._headers(body);
    path = this._path(options);
    request = https.request({
      host: this.host,
      port: this.port,
      method: 'POST',
      path: path,
      headers: headers
    });
    request.on('response', function(response) {
      response.readAll(function(error, payload) {
        if (typeof options.callback === "function") {
          options.callback(error);
        }
        return void 0;
      });
      return void 0;
    });
    request.on('error', function(error) {
      if (typeof options.callback === "function") {
        options.callback(error);
      }
      return void 0;
    });
    request.end(body);
    return this;
  };

  Client.prototype.accountInfo = function(payload, callback) {};

  Client.prototype.operationHistory = function(payload, callback) {};

  Client.prototype.operationDetails = function(payload, callback) {};

  Client.prototype.requestPayment = function(payload, callback) {};

  Client.prototype.processPayment = function(payload, callback) {};

  return Client;

})();

module.exports = Client;
